// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(30)
  email     String   @unique @db.VarChar(60)
  password  String
  role      Role     @default(USER)
  recipes   Recipe[]
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Recipe {
  id          Int                @id @default(autoincrement())
  name        String             @unique @db.VarChar(30)
  description String             @db.VarChar(1000)
  ingredients Ingredient[]
  steps       Step[]
  reviews     Review[]
  categories  RecipeCategories[]
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("recipes")
}

model RecipeCategories {
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId   Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  assignedAt DateTime @default(now())

  @@id([recipeId, categoryId])
  @@map("recipe_categories")
}

model Ingredient {
  id          Int      @id @default(autoincrement())
  description String   @db.VarChar(100)
  quantity    Int
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ingredients")
}

model Step {
  id          Int      @id @default(autoincrement())
  description String   @db.VarChar(200)
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("steps")
}

model Review {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(100)
  text      String   @db.VarChar(600)
  rating    Decimal  @db.Decimal(2, 1)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Category {
  id        Int                @id @default(autoincrement())
  name      String             @unique @db.VarChar(30)
  recipes   RecipeCategories[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@map("categories")
}

enum Role {
  USER
  COOK
  ADMIN
}
